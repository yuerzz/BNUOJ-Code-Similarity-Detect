#include<stdio.h>
#include<string.h>
using namespace std;
int cat_n[100000];
int way[100000][4];
int find_min(int *cat_n,int n)
{
    int minm=10000000;
    int min_index;
    for(int i=0;i<n;i++)
    {
        if(cat_n[i]>0&&cat_n[i]<minm)
        {
            minm=cat_n[i];
            min_index=i;
        }
    }
    return min_index;
}
int main()
{
    int num;
    scanf("%d",&num);
    while(num--)
    {
        int n,m;
        scanf("%d",&n);
        scanf("%d",&m);
        int x,y,z;

        memset(way,0,sizeof(way));
        memset(cat_n,0,sizeof(cat_n));
        for(int i=0;i<m;i++)
        {
            scanf("%d%d%d",&x,&y,&z);
            //way[x][y]=way[y][x]=z;
            way[i][0]=x;
            way[i][1]=y;
            way[i][2]=z;
            cat_n[x]+=z;
            cat_n[y]+=z;
        }
        int min_n=0;
        int index_min=0;
        for(int i=0;i<n;i++)
        {
            index_min=find_min(cat_n,n);
            if(cat_n[index_min]>min_n)
            {
                min_n=cat_n[index_min];
            }
            for(int i=0;i<m;i++)
            {
                if(way[i][0]==index_min||way[i][1]==index_min)
                {
                    cat_n[way[i][0]]-=way[i][2];
                    cat_n[way[i][1]]-=way[i][2];
                    way[i][2]=0;
                }

                /*cat_n[i]-=way[index_min][i];
                way[index_min][i]=way[i][index_min]=0;*/
            }
        }
        printf("%d\n",min_n);
    }
    return 0;
}
