#include<iostream>
#include<cstdio>
#include<cstring>
#include<vector>
#include<algorithm>
#include<cmath>
#include<set>
#include<map>
#include<queue>
#include<utility>
#include<cstdlib>
using namespace std;
typedef long long LL;
#define pb push_back
#define rep(i,a,b) for(int i=(a);i<(b);i++)
#define de(x) cout<<">> "<<#x<<" = "<<x<<endl;

#define fi first
#define se second
const int MAXN = 1e3+5;
const int mod = 1e9+7;
int n,m,T;
int a[MAXN],b[MAXN];
int dp[MAXN][101][101][2];

int main()
{
//    freopen("in.txt","r",stdin);
    scanf("%d",&T);
    while(T--)
    {
        int ans = 0;
        scanf("%d%d",&n,&m);
        rep(i,1,n+1) scanf("%d",a+i);
        rep(i,1,m+1) scanf("%d",b+i);
        sort(b+1,b+m+1);
        memset(dp,0,sizeof dp);

        for (int i=0;i<=n;i++)
        {
            for (int j=0;j<=m;j++)
            {
                for (int k=0;k+j<=m;k++)
                {
//                    de(i) de(j) de(k)
                    if (i>0) dp[i][j][k][0] = max(dp[i][j][k][0],dp[i-1][j][k][0]);
                    if (j>0) dp[i][j][k][0] = max(dp[i][j][k][0],dp[i][j-1][k][0]);
                    if (i>0) dp[i][j][k][0] = max(dp[i][j][k][0],dp[i-1][j][k][1]);
                    if (j>0) dp[i][j][k][0] = max(dp[i][j][k][0],dp[i][j-1][k][1]);
                    if (i>0)dp[i][j][k][1] = max(dp[i][j][k][1],dp[i-1][j][k][0]+a[i]);
                    if (k>0)
                    {
                        dp[i][j][k][1] = max(dp[i][j][k][1],dp[i][j][k-1][0]+b[m-k+1]);
//                        de(b[m-k+1])
                    }
                    ans = max(dp[i][j][k][0],ans);
                    ans = max(dp[i][j][k][1],ans);
//                    de(dp[i][j][k][0])
//                    de(dp[i][j][k][1])
                }
            }
        }
        printf("%d\n",ans);
    }
}
