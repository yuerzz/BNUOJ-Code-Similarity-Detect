#include <bits/stdc++.h>
#define bugs
const int maxN = 1e5 + 3;
typedef std::string str;
typedef long long ll;
typedef long double db;
const ll linf = 0x3f3f3f3f3f3f;
typedef ll llvec[maxN];
typedef int intvec[maxN];
typedef bool boolvec[maxN];
typedef db dbvec[maxN];
typedef char c_str[maxN];
template <typename T> inline const T abs (T x) {return x>=0?x:-x;}
ll mod = 1e9 + 7;
ll pow(ll x,ll n)
{
	if (n<0) return pow(x,n*(2-mod));
	ll ans=1,tmp=x;
	while (n)
	{
		if (n&1) ans = ans*tmp%mod;
		tmp=tmp*tmp%mod;
		n>>=1;
	}
	return ans;
}

int n1,n2,n3;
llvec p1,p2,p3,d1,d2,d3;
boolvec used1,used2;
struct helper
{
	int pn,px;
	ll d;
	helper(int _n,int _x,ll _d):pn(_n),px(_x),d(_d) {}
	bool operator<(const helper& h) const
	{
		return d>h.d;
	}
};
void main_part()
{
	std::scanf("%d %d %d",&n1,&n2,&n3);
	std::priority_queue<helper> q;
	for (int i=0;i<n1;++i) std::scanf("%lld",p1+i);
	for (int i=0;i<n2;++i) std::scanf("%lld",p2+i);
	for (int i=0;i<n3;++i) std::scanf("%lld",p3+i);
	for (int i=0;i<n1;++i)
	{
		d1[i] = 0;
		q.emplace(1,i,0);
	}
	std::fill_n(d2,maxN,linf);
	std::fill_n(d3,maxN,linf);
	std::fill_n(used1,maxN,false);
	std::fill_n(used2,maxN,false);
	while (!q.empty())
	{
		helper tmp = q.top();
		//std::printf("Nearest p%d[%d]=%lld\n",tmp.pn,tmp.px,tmp.d);
		q.pop();
		if (tmp.pn == 1)
		{
			if (used1[tmp.px]) continue;
			//std::printf("Nearest p%d[%d]=%lld\n",tmp.pn,tmp.px,tmp.d);
			used1[tmp.px] = true;
			int pos = std::lower_bound(p2,p2+n2,p1[tmp.px])-p2;
			if (pos!=n2 && d2[pos]>p2[pos]-p1[tmp.px]+d1[tmp.px]+1)
			{
				d2[pos]=p2[pos]-p1[tmp.px]+d1[tmp.px]+1;
				q.emplace(2,pos,d2[pos]);
			}
			if (pos!=0 && d2[pos-1]>p1[tmp.px]-p2[pos-1]+d1[tmp.px]+1)
			{
				d2[pos-1]=p1[tmp.px]-p2[pos-1]+d1[tmp.px]+1;
				q.emplace(2,pos-1,d2[pos-1]);
			}
		}
		else if (tmp.pn == 2)
		{
			if (used2[tmp.px]) continue;
			//std::printf("Nearest p%d[%d]=%lld\n",tmp.pn,tmp.px,tmp.d);
			used2[tmp.px] = true;
			int pos = std::lower_bound(p3,p3+n3,p2[tmp.px])-p3;
			if (pos!=n3 && d3[pos]>p3[pos]-p2[tmp.px]+d2[tmp.px]+1)
			{
				d3[pos]=p3[pos]-p2[tmp.px]+d2[tmp.px]+1;
				q.emplace(3,pos,d3[pos]);
			}
			//std::printf("---%d %lld - %lld\n",pos,d3[pos-1],p2[tmp.px]-p3[pos-1]+d2[tmp.px]+1);
			if (pos!=0 && d3[pos-1]>p2[tmp.px]-p3[pos-1]+d2[tmp.px]+1)
			{
				//std::printf("HERE\n");
				d3[pos-1]=p2[tmp.px]-p3[pos-1]+d2[tmp.px]+1;
				q.emplace(3,pos-1,d3[pos-1]);
			}
			if (tmp.px!=n2-1 && d2[tmp.px+1]>p2[tmp.px+1]-p2[tmp.px]+d2[tmp.px])
			{
				d2[tmp.px+1]=p2[tmp.px+1]-p2[tmp.px]+d2[tmp.px];
				q.emplace(2,tmp.px+1,d2[tmp.px+1]);
			}
			if (tmp.px!=0 && d2[tmp.px-1]>p2[tmp.px]-p2[tmp.px-1]+d2[tmp.px])
			{
				d2[tmp.px-1]=p2[tmp.px]-p2[tmp.px-1]+d2[tmp.px];
				q.emplace(2,tmp.px-1,d2[tmp.px-1]);
			}
		}
		else if (tmp.pn == 3)
		{
			//std::printf("Nearest p%d[%d]=%lld\n",tmp.pn,tmp.px,tmp.d);
			std::printf("%lld\n",d3[tmp.px]+1);
			return;
		}
	}
}
int main()
{
	int T;
	std::scanf("%d",&T);
	while (T--) main_part();
}

/*
1
5 3 2
-2 0 2 3 4
-3 1 5
-1 4
*/
