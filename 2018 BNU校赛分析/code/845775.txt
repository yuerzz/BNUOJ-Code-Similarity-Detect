#include<bits/stdc++.h>
#define ll long long
#define pb push_back
#define max(a,b) (a>b?a:b)
using namespace std;
namespace fastIO{
	#define BUF_SIZE 100000
	//fread -> read
	bool IOerror=0;
	inline char nc(){static char buf[BUF_SIZE],*p1=buf+BUF_SIZE,*pend=buf+BUF_SIZE;if(p1==pend){p1=buf;pend=buf+fread(buf,1,BUF_SIZE,stdin);if(pend==p1){IOerror=1;return -1;}}return *p1++;}
	inline bool blank(char ch){return ch==' '||ch=='\n'||ch=='\r'||ch=='\t';}
	inline void read(ll &x){char ch;ll f=1;while(blank(ch=nc()));while (ch=='-')f=-f,ch=nc();if(IOerror)return;for(x=ch-'0';(ch=nc())>='0'&&ch<='9';x=x*10+ch-'0');x*=f;}
	inline void read(int &x){char ch;int f=1;while(blank(ch=nc()));while (ch=='-')f=-f,ch=nc();if(IOerror)return;for(x=ch-'0';(ch=nc())>='0'&&ch<='9';x=x*10+ch-'0');x*=f;}
	inline void read(char* s){char ch;while(blank(ch=nc()));if(IOerror)return;int i=0;for (;!blank(ch);s[i++]=ch,ch=nc());s[i]='\0';}
	#undef BUF_SIZE
};
using namespace fastIO;
inline int read()
{
	int x=0,f=1;char ch=getchar();
	while(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}
	while(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}
	return x*f;
}
int n,m,ans;
int a[1010],b[110];
int f[1010][101][101][2];
int g[1010][101][101];
inline void work(int cur)
{
    memset(f,0,sizeof f);
    memset(g,0,sizeof g);
    ans=0;
    scanf("%d%d",&n,&m);
    for (int i=1;i<=n;i++)scanf("%d",a+i);
    for (int i=1;i<=m;i++)scanf("%d",b+i);sort(b+1,b+m+1);
    for (int i=1;i<=n;i++)
    {
        for (int j=0;j<=m;j++)
            for (int k=0;j+k<=m;k++)
            {
                f[i][j][k][0]=g[i-1][j][k];
                if (j)f[i][j][k][0]=max(f[i][j][k][0],g[i][j-1][k]);
                if (k)f[i][j][k][0]=max(f[i][j][k][0],g[i][j][k-1]);
                f[i][j][k][1]=f[i-1][j][k][0]+a[i];
                if (j)f[i][j][k][1]=max(f[i][j][k][1],f[i][j-1][k][0]+b[j]);
                if (k)f[i][j][k][1]=max(f[i][j][k][1],f[i][j][k-1][0]+b[n-k+1]);
                g[i][j][k]=max(f[i][j][k][0],f[i][j][k][1]);
                ans=max(ans,g[i][j][k]);
            }
    }
    printf("%d\n",ans);
}
int main()
{
    int T,cnT=0;
    T=read();
    //T=1;
    while (T--)work(++cnT);
    return 0;
}
