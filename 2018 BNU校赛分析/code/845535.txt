#include <iostream>
#include <cstdio>
#include <cstring>
#include <utility>
#include <queue>
#define FOR(I,S,N) for (I=S;I<=N;I++)
#define REP(I,S,N) for (I=S;I<N;I++)
#define rFOR(I,S,N) for (I=N;I>=S;I--)
using namespace std;
typedef long long LL;
const int INF=0x3f3f3f3f;
const LL INFF=0x3f3f3f3f3f3f3f3f;
const int maxn=1e6+7;

LL Abs(LL x){return x>0?x:-x;}
int n;
priority_queue<pair<LL,int> > Q;
vector<pair<int,int> > edge[maxn];
LL sum[maxn];
bool used[maxn];
LL now;
bool check(LL x){
    int i;
    FOR(i,1,n) sum[i]=0,used[i]=0;
    FOR(i,1,n){
        for (auto now:edge[i]){
            sum[now.first]+=now.second;
        }
    }FOR(i,1,n) Q.push(make_pair(-sum[i],i));
    while (Q.size()){
        auto now=Q.top();Q.pop();
        if (used[now.second]) continue;
//        printf("%d : %lld\n",now.second,now.first);
        used[now.second]=1;
        if (-now.first>x) return 0;
        for (auto v:edge[now.second]){
            sum[v.first]-=v.second;
            if (!used[v.first])
                Q.push(make_pair(-sum[v.first],v.first));
        }
    }return 1;
}
int main(){
    int T;
    scanf("%d",&T);
    while (T--){
        int m,i;
        scanf("%d%d",&n,&m);
        FOR(i,1,n) edge[i].clear();
        FOR(i,1,m){
            int u,v,c;
            scanf("%d%d%d",&u,&v,&c);
            edge[u].push_back(make_pair(v,c));
            edge[v].push_back(make_pair(u,c));
        }
        LL l,r;
        l=0;r=1e11+7;
        while (l+1<r){
            LL mid=(l+r)/2;
            if (check(mid)) r=mid;
            else l=mid;
        }printf("%lld\n",r);
    }
}
/*
1
4 6
1 2 2
1 3 2
1 4 2
2 3 3
2 4 3
3 4 5
*/
