#include<iostream>
#include<cstring>
#include<cmath>
#include<iomanip>
using namespace std;
struct node
{
	int x,y;
	node operator -(node p)
	{
		return (node){x-p.x,y-p.y};
	}
	int operator *(node p)
	{
		return x*p.y-y*p.x;
	}
	int operator /(node p)
	{
		return (x-p.x)*(x-p.x)+(y-p.y)*(y-p.y);
	}
} a[21],sun;
bool cross(int x,int y)
{
	if(((a[x]-a[y])*(a[x+1]-a[y]))*((a[x]-sun)*(a[x+1]-sun))<0&&((a[y]-a[x])*(sun-a[x]))*((a[y]-a[x+1])*(sun-a[x+1]))<0)
		return true;
	if((a[x]-a[y])*(a[x]-sun)==0&&a[x]/sun<a[y]/sun) return true;
	return false;
}
int main()
{
	int t;
	int n;
	int i,j;
	int mode;
	double sum,sum1;
	
	cin>>t;
	while(t--)
	{
		cin>>n;sum=0;sum1=0;
		for(i=1;i<=n;i++) cin>>a[i].x>>a[i].y;
		cin>>sun.x>>sun.y;
		for(i=1;i<=n;i++) a[i+n]=a[i];
		for(i=1;i<=n;i++) sum+=sqrt(a[i]/a[i+1]);
		for(i=1;i<=n;i++) if(cross(i,n)) break;
		if(i<=n) mode=-1;
		else mode=1;
		for(i=n-1;i>=1;i--)
		{
			for(j=1;j<=n;j++)
				if(cross(j,i))
				{
					if(mode==-1) sum-=sqrt(a[i]/a[i+1]);
					break;
				}
			if(j<=n&&mode==1||j>n&&mode==-1) 
			{
				if(mode==-1) sum-=sqrt(a[i]/a[i+1]);
				break;
			}
			if(j>n&&mode==1) sum1+=sqrt(a[i]/a[i+1]);
		}
		for(i=n+1;i<=2*n;i++)
		{
			for(j=1;j<=n;j++)
				if(cross(j,i))
				{
					if(mode==-1) sum-=sqrt(a[i]/a[i+1]);
					break;
				}
			if(j<=n&&mode==1||j>n&&mode==-1) 
			{
				if(mode==-1) sum-=sqrt(a[i]/a[i+1]);
				break;
			}
			if(j>n&&mode==1) sum1+=sqrt(a[i]/a[i+1]);
		}
		if(mode==-1) cout<<fixed<<setprecision(9)<<sum<<endl;
		else cout<<fixed<<setprecision(9)<<sum1<<endl;
	}
}
