#include <iostream>
const int maxN = 1e5 + 3;
typedef std::string str;
typedef long long ll;
typedef long double db;
typedef ll llvec[maxN];
typedef int intvec[maxN];
typedef bool boolvec[maxN];
typedef db dbvec[maxN];
template <typename T> inline const T abs (T x) {return x>=0?x:-x;}
ll mod = 1e9 + 7;
ll pow(ll x,ll n)
{
	if (n<0) return pow(x,n*(2-mod));
	ll ans=1,tmp=x;
	while (n)
	{
		if (n&1) ans = ans*tmp%mod;
		tmp=tmp*tmp%mod;
		n>>=1;
	}
	return ans;
}

/*
intvec nums;
boolvec used;
int N,ans_N;
db ans;
void get()
{
	//for (int i=1;i<=N;++i) std::printf("%d ",nums[i]);
	//std::printf("\n");
	++ans_N;
	for (int i=2;i<=N;++i) ans += abs(nums[i]-nums[i-1]);
}
void dfs(int i,int k)
{
	if (used[i]) return;
	used[i] = true;
	nums[k]=i;
	if (k==N)
	{
		get();
		used[i] = false;
		return;
	}
	for (int n=1;n<=N;++n) dfs(n,k+1);
	used[i] = false;
}
int main()
{
	for (N=2;N<=20;++N)
	{
		std::fill_n(used,maxN,false);
		ans_N = ans = 0;
		dfs(0,0);
		std::printf("%Lf\n",ans/ans_N);
	}
}
*/
dbvec ans;
int main()
{
	ans[2] = 1;
	for (int i=3;i<103;++i)
	{
		ans[i] = ans[i-1]+(db)(i*2-1)/3;
	}
	int T,k;
	std::scanf("%d",&T);
	while (T--)
	{
		std::scanf("%d",&k);
		std::printf("%0.11Lf\n",ans[k]);
	}
}
