    #include<iostream>
    #include<algorithm>
    #include<cstring>
    #include<cmath>
    #include<climits>
    using namespace std;
    long long mm = INT_MAX;
    struct s{
        long long pos;
        int num;
    } arr[1000005];
    bool cmp(s s1,s s2){
        return s1.pos<s2.pos;
    }
    int main(){
        int T;
        cin>>T;
        while(T--){
            mm = INT_MAX;
            int n,m,k;
            cin>>n>>m>>k;
            for(int i=0;i<n;i++){
                cin>>arr[i].pos;
                arr[i].num = 1;
            }
            for(int i=n;i<n+m;i++){
                cin>>arr[i].pos;
                arr[i].num = 2;
            }
            for(int i=n+m;i<n+m+k;i++){
                cin>>arr[i].pos;
                arr[i].num = 3;
            }
            sort(arr,arr+n+m+k,cmp);

       // for(int i=0;i<n+m+k;i++){
       //     cout<<arr[i].num<<" "<<arr[i].pos<<endl;
       // }
            long long a = -1e9;
            long long b = 1e9;
            long long c = -1e9;
            for(int i=0;i<n+m+k;i++){
                 //   cout<<mm<<endl;
                if(arr[i].num==1){
                    int tempa = arr[i].pos;
                  //  cout<<tempa<<endl;
                    if(abs(tempa-b)+abs(c-b)<mm){
                        mm = abs(tempa-b)+abs(c-b);

                    }
                    a = tempa;
                }

                if(arr[i].num==2){
                    int tempb = arr[i].pos;
                    if(abs(a-tempb)+abs(c-tempb)<mm){
                        mm = abs(a-tempb)+abs(c-tempb);

                    }
                    b = tempb;
                }
                if(arr[i].num==3){
                    int tempc = arr[i].pos;
                    if(abs(a-b)+abs(tempc-b)<mm){
                        mm = abs(a-b)+abs(tempc-b);

                    }
                    c = tempc;

                }

              //   cout<<a<<" "<<b<<" "<<c<<endl;
            }

          //  cout<<a<<" "<<b<<" "<<c<<endl;
            cout<<mm+3<<endl;

        }
    }

