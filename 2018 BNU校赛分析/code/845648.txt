#include <iostream>
#include <cstdio>
#include <cstring>
#include <utility>
#include <queue>
#define FOR(I,S,N) for (I=S;I<=N;I++)
#define REP(I,N) for (I=0;I<N;I++)
#define rFOR(I,S,N) for (I=N;I>=S;I--)
using namespace std;
typedef long long LL;
const int INF=0x3f3f3f3f;
const LL INFF=0x3f3f3f3f3f3f3f3f;
const int maxn=1e6+7;

LL Abs(LL x){return x>0?x:-x;}

int n;
priority_queue<pair<LL,int> > Q;
vector<pair<int,int> > edge[maxn];
LL sum[maxn];
bool used[maxn];
LL check(){
    int i;
    LL ret=0;
    FOR(i,1,n) sum[i]=0,used[i]=0;
    FOR(i,1,n){
        int j;
        REP(j,edge[i].size()){
            pair<int,int> now=edge[i][j];
            sum[now.first]+=now.second;
        }
    }while (Q.size()) Q.pop();
    FOR(i,1,n) Q.push(make_pair(-sum[i],i));
    while (Q.size()){
        pair<LL,int> now=Q.top();Q.pop();
        if (used[now.second]) continue;
//        printf("%lld  %d : %lld\n",x,now.second,now.first);
        used[now.second]=1;
        ret=max(ret,-now.first);
        for (auto v:edge[now.second]){
            sum[v.first]-=v.second;
            if (!used[v.first])
                Q.push(make_pair(-sum[v.first],v.first));
        }
    }return ret;
}
int main(){
    int T;
    scanf("%d",&T);
    while (T--){
        int m,i;
        scanf("%d%d",&n,&m);
        FOR(i,1,m){
            int u,v,c;
            scanf("%d%d%d",&u,&v,&c);
            edge[u].push_back(make_pair(v,c));
            edge[v].push_back(make_pair(u,c));
        }printf("%lld\n",check());
        FOR(i,1,n) edge[i].clear();
    }
}
/*
1
4 6
1 2 2
1 3 2
1 4 2
2 3 3
2 4 3
3 4 5
*/
