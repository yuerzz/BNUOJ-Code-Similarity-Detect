#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef unsigned long long ull;
typedef pair<int,int> pii;
typedef pair<int,ll>pil;
const int MAX=1e5+5;
const ll MOD=1e9+7;

#define pb push_back
#define mp make_pair

int gcd(int a,int b){return b?gcd(b,a%b):a;}
template<typename T>inline T abs(T a) {return a>0?a:-a;}
template<class T> inline
void read(T& num) {
    bool start=false,neg=false;
    char c;
    num=0;
    while((c=getchar())!=EOF) {
        if(c=='-') start=neg=true;
        else if(c>='0' && c<='9') {
            start=true;
            num=num*10+c-'0';
        } else if(start) break;
    }
    if(neg) num=-num;
}
inline ll powMM(ll a,ll b,ll M){
    ll ret=1;
    a%=M;
    while (b){
        if (b&1) ret=ret*a%M;
        b>>=1;
        a=a*a%M;
    }
    return ret;
}
#define list lis
const double eps=1e-9;
int sgn(double x)
{
    if(fabs(x)<eps)return 0;
    if(x<0)return -1;
    else return 1;
}
struct Point
{
    double x,y;
    Point(){}
    Point(double _x,double _y)
    {
        x=_x;y=_y;
    }
    Point operator -(const Point &b)const
    {
        return Point(x-b.x,y-b.y);
    }
    Point operator +(const Point &b)const
    {
        return Point(x+b.x,y+b.y);
    }
    double operator ^(const Point &b)const
    {
        return x*b.y-y*b.x;
    }
    double operator *(const Point &b)const
    {
        return x*b.x+y*b.y;
    }
};

struct Line
{
    Point s,e;
    Line(){}
    Line(Point _s,Point _e)
    {
        s=_s;e=_e;
    }
};
bool OnSeg(Point P,Line L)
{
    return
    sgn((L.s-P)^(L.e-P))==0 &&
    sgn((P.x-L.s.x)*(P.x-L.e.x))<=0 &&
    sgn((P.y-L.s.y)*(P.y-L.e.y))<=0;
}

int inConvexPoly(Point a,Point p[],int n)
{
    for(int i=0;i<n;i++)
    {
        if(sgn((p[i]-a)^(p[(i+1)%n]-a))<0)return -1;
        else if(OnSeg(a,Line(p[i],p[(i+1)%n])))return 0;
    }
    return 1;
}
double dist(Point a,Point b)
{
    return sqrt((a-b)*(a-b));
}
Point list[MAX];
int Stack[MAX],top;
bool _cmp(Point p1,Point p2)
{
    double tmp=(p1-list[0])^(p2-list[0]);
    if(sgn(tmp)>0)return 1;
    else if(sgn(tmp)==0&&sgn(dist(p1,list[0])-dist(p2,list[0]))<=0)
        return 1;
    else return 0;
}

void Graham(int n)
{
    Point p0;
    int k=0;
    p0=list[0];
    for(int i=1;i<n;i++)
    {
        if(p0.y>list[i].y||(p0.y==list[i].y&&p0.x>list[i].x))
        {
            p0=list[i];k=i;
        }
    }
    swap(list[k],list[0]);
    sort(list+1,list+n,_cmp);
    if(n==1)
    {
        top=1;Stack[0]=0;return;
    }
    if(n==2)
    {
        top=2;Stack[0]=0;Stack[1]=1;return;
    }
    top=2;Stack[0]=0;Stack[1]=1;
    for(int i=2;i<n;i++)
    {
        while(top>1 &&
              sgn((list[Stack[top-1]]-list[Stack[top-2]])^(list[i]-list[Stack[top-2]]))<=0
              )
                top--;
        Stack[top++]=i;
    }
}
int t,n;
double x,y;
Point tu[105];
double ans;
bool check(int z,int k)
{
    Point who=tu[z];
    double xju=x-who.x,yju=y-who.y;
    xju/=100000,yju/=100000;
    bool re=1;
    for(int i=1;i<=100000;i++)
    {
        Point tem=who+Point(xju*i,yju*i);
        if(inConvexPoly(tem,tu,top)>=0)
            return false;
    }
    who=tu[k];
    xju=x-who.x,yju=y-who.y;
    xju/=100000,yju/=100000;
    re=1;
    for(int i=1;i<=100000;i++)
    {
        Point tem=who+Point(xju*i,yju*i);
        if(inConvexPoly(tem,tu,top)>=0)
            return false;
    }
    xju=tu[k].x-tu[z].x,yju=tu[k].y-tu[z].y;
    who=tu[z]+Point(xju/2,yju/2);
    xju=x-who.x,yju=y-who.y;
    xju/=100000,yju/=100000;
    re=1;
    for(int i=1;i<=100000;i++)
    {
        Point tem=who+Point(xju*i,yju*i);
        if(inConvexPoly(tem,tu,top)>=0)
            return false;
    }
    return true;
}
bool pos[105];
int main()
{
    scanf("%d",&t);
    while(t--)
    {
        scanf("%d",&n);
        memset(pos,0,sizeof(pos));
        for(int i=0;i<n;i++)scanf("%lf%lf",&list[i].x,&list[i].y);
        Graham(n);
        ans=0;
//        for(int i=0;i<top;i++)
//            printf("%.2f %.2f\n",list[Stack[i]].x,list[Stack[i]].y);
        scanf("%lf%lf",&x,&y);
        for(int i=0;i<top;i++)
            tu[i]=list[Stack[i]];
        bool st=false;
        if(top==1)
            ans=0;
        else if(top==2)
        {
            ans=dist(tu[0],tu[1]);
        }
        else
        {
            for(int i=0;i<top;i++)
            {
                int pre=(i-1+top)%top;
                if(check(i,pre))
                {
                    pos[i]=1;
                    ans+=dist(tu[i],tu[pre]);
    //                printf("i=%d!\n",i);
    //                if(!st)st=1;
    //                else ans+=dist(tu[i],tu[(i-1+top)%top]);
                }
            }
        }
//        if(top>3)
//        {
//            for(int i=0;i<top;i++)
//        {
//            int pre=(i-1+top)%top;
//            if(pos[i]&&pos[pre])
//                ans+=dist(tu[i],tu[pre]);
//        }
        printf("%.10f\n",ans);
    }
    return 0;
}
/*
4
3
0 0
2 0
0 2
2 2


4
4
0 0
1 0
2 0
1 1
0 5
*/
